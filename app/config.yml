{
  #your IP and port with which to provision your APIs
  'ip': '0.0.0.0',
  'port': '7777',
  
  #ip and port where elasticsearch runs on your system
  'elasticsearch_ip': 'es01',
  'elasticsearch_port': '9200',

  #API ENDPOINTS
  'stored_intents_url': 'http://ibi-api:7777/stored_intents',
  'intents_url': 'http://ibi-api:7777/intents',
  'stored_qos_intents_url': 'http://ibi-api:7777/stored_qos_intents',
  'qos_intents_url': 'http://ibi-api:7777/qos_intents',
  
  #PROVISIONED BY THE IBI
  #eg API endpoint for sending intents: "http://172.21.0.1:7777/intents"
  #the API for sending intents is where the DTE sends intents
  'to_enter_intents': '/intents',
  #the receive_whatif API is the API for receiving what-if answers from the SAN
  'to_receive_whatif': '/whatif_receives',
  #the stored_intents API is for viewing and deleting existing intents
  'to_view_or_delete_intents': '/stored_intents',
  #the API for sending intents is where the DTE sends intents
  'to_enter_qos_intents': '/qos_intents',
  #the stored_intents API is for viewing and deleting existing intents
  'to_view_or_delete_qos_intents': '/stored_qos_intents',
  
  #PROVISIONED BY OTHER MODULES
  #the API for sending workflow is the API for sending workflows to RTR
  'to_send_workflow': '/workflows',
  'rtr_api_url': 'http://0.0.0.0:8000',
  'rtr_username': 'user2',
  'rtr_password': 'user2',
  'rtr_email': 'user2@gmail.com',
  'to_connect_to_rtr': 'true',
  #the send_whatif API is the API for sending what-if questions to the SAN
  'to_send_whatif': '/whatif_sends',
  'san_api_url': 'http://ibi-api:7777/whatif_sends',
   
  
  #to clear existing intent store if you want, otherwise, set it as 'false'
  'clear_intent_store': 'true',

  #directories and files
  'templates_directory': 'templates',
  'static_directory': 'static',
  'policy_store_file': 'policy_store.csv',

  #attack types, mitigation actions and hosts
  'ddos_ntp': {
    'monlist_disable': 'ntp_server',
    'ntp_service_switch_off': 'ntp_server',
    'absorb_traffic': 'R2',
    'server_handover': 'ntp_server',
    'firewall_spoofing_detection': 'R2',
    'upgrade_software': 'ntp_server',
    'investigations_report': 'request_to_network_admin'
  },
  'ddos_dns': {
    'Shut down/disable DNS server': 'dns_server',
    'absorb_traffic': 'R2',
    'server_handover': 'dns_server',
    'Block potentially spoofed packets with destination 10.0.0.6 in interface eth1': 'R2',
    'Reduce/set the number of requests to the dns server to 40/s for port 53 protocol udp': 'dns_server',
    'investigations_report': 'request_to_network_admin'
  },
  'ddos_pfcp': {
    'sba_function_disable': 'orchestrator',
    'new_ns_slice_creation': 'OSS',
    'rate_limiting': 'SMF',
    'investigations_report': 'request_to_network_admin'
  },

  #examples of operator's qos requirements definition
  'qos_requirements': [{
    'intent_type': 'qos_ntp',
    'name': 'reliability',
    'value': 0.9,
    'host': ['192.164.56.20', '192.164.58.34']
  },
  {
    'intent_type': 'qos_dns',
    'name': 'latency',
    'value': 0.2,
    'host': [ '192.164.56.20', '192.164.58.34' ]
  },
  {
    'intent_type': 'qos_pfcp',
    'name': 'bandwidth',
    'value': 5000,
    'host': [ '192.164.56.20', '192.164.58.34' ]
  }],

  #TOPOLOGY
  'hosts': {
    'dns_c1': '192.168.56.11',
    'dns_c2': '192.168.56.12',
    'dns_c3': '192.168.56.13',
    'dns_c4': '192.168.56.14',
  }

}